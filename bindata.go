// Code generated by go-bindata.
// sources:
// templates/.DS_Store
// templates/code_template.go.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesDs_store = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x98\x3b\x0e\xc2\x30\x10\x44\x77\x8c\x0b\x4b\x34\x2e\x29\xdd\x70\x00\x6e\x60\x45\xe1\x04\x5c\x80\x82\x2b\xd0\xfb\xe8\x24\xda\x11\xb2\x14\x52\x50\x25\x82\x79\x92\xf5\x56\x8a\x9d\x4f\xe3\xec\xd8\xcc\x30\x3c\x1f\x17\xb3\x3c\x95\xc9\xdc\x76\xb6\x8f\x24\x8e\x05\xa1\xab\xc1\x7b\x08\x21\x84\x10\x62\xdf\xc0\x95\x8e\xdb\xbe\x86\x10\x62\x87\xcc\xfb\x43\xa1\x2b\xdd\xdc\xe0\xf5\x40\xc7\x6e\x4d\xa6\x0b\x5d\xe9\xe6\x06\xe7\x05\x3a\xd2\x89\xce\x74\xa1\x2b\xdd\xdc\xdc\xb4\xc0\xf0\x01\x3e\x19\x4c\x28\x60\x0a\x41\xa1\xeb\x97\x1f\x2d\xc4\x9f\x70\x70\xe5\xf9\xff\x7f\xb5\xd5\xfc\x2f\x84\xf8\x61\x10\xc7\xdb\x38\xd8\x3b\x10\x2c\x27\x4c\xe3\xde\xd5\xcd\xd6\x9b\x80\xe0\x87\x85\xa7\x6e\x6d\xa1\x2b\xdd\xdc\x6a\x04\x84\xd8\x8a\x57\x00\x00\x00\xff\xff\x6a\x00\x88\x6d\x04\x18\x00\x00")

func templatesDs_storeBytes() ([]byte, error) {
	return bindataRead(
		_templatesDs_store,
		"templates/.DS_Store",
	)
}

func templatesDs_store() (*asset, error) {
	bytes, err := templatesDs_storeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/.DS_Store", size: 6148, mode: os.FileMode(420), modTime: time.Unix(1469352040, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCode_templateGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x92\xc1\x8e\xd3\x30\x10\x86\xcf\xf1\x53\x0c\x39\xd9\x28\xf2\xc2\xa5\x07\x50\x0f\xcb\x6e\xab\x1e\x56\xbb\x51\x5a\xb4\x47\x64\x65\x27\xc1\xc2\xb5\x83\xed\x50\x50\xe9\xbb\x33\x76\x1a\x54\x50\x2f\x7b\xb1\xc7\xe3\xf1\xcc\x7c\xff\x78\x50\xed\x37\xd5\x23\xec\x95\xb6\x8c\xe9\xfd\xe0\x7c\x04\xce\x8a\xb2\xdb\xc7\x92\x36\xe3\xfa\xb4\x59\x8c\x37\x5f\x63\x1c\x2e\xed\x9b\xb6\xd7\xff\x9c\xd3\x32\x46\x6d\x66\xe7\xe8\xb3\xe9\x42\x5a\x43\xf4\xda\xf6\x64\x0a\xc6\x5a\x67\x43\x84\x4f\x2a\xe0\xe7\xe6\x01\x96\x50\x1e\x8f\x20\xe7\xe3\xe9\x54\x32\xd6\x8d\xb6\xcd\x3d\x71\x01\x47\xc6\x8a\xae\x02\xf4\x1e\x3e\x2c\xc1\x05\xf9\x34\xa0\x5d\x6b\x83\x3c\xbf\x7b\x70\x7d\x3a\xa4\x77\x55\xbe\xfd\xd2\xdc\x3f\x37\xbf\xb3\x75\xd7\xac\x6e\x77\xab\xc9\xbe\xad\xeb\xd5\xe3\x7d\x05\xef\x16\x8b\x85\x60\x85\xee\x72\xc6\x37\x4b\xb0\xda\x50\x8d\xa2\x20\x54\xb9\x56\x51\x19\x63\x39\x5d\x51\xcc\x89\x15\x2f\xd8\xa1\x87\x4e\xde\x19\x17\x90\x93\x2f\x45\x6d\x31\x3e\x8d\x89\x95\x77\x44\x33\xa7\xa2\xe6\x48\x11\xba\xf4\x3f\x90\x27\x2d\xe4\x46\xd9\x17\x83\x7e\x4d\x30\x3c\x11\xf1\x03\x64\x7f\x83\x61\x20\x09\xf0\xd9\xeb\x88\xbe\x02\x0f\x6f\xcf\xfe\xef\x23\x86\x28\x72\x3b\x51\xf9\x1e\xe3\x5f\x6e\x12\x53\xd6\xca\x87\x33\x75\xae\xe2\x13\x34\xf5\x74\x05\xe6\x0a\x4d\xc2\x29\xbc\x24\x8d\xa7\xa4\x97\x39\xcf\xd3\xa1\x0e\x06\xa3\x5a\xe4\x39\x4c\x6e\xb3\x97\x8b\x6a\x9e\x55\x05\x25\x89\xfc\x5e\xbc\xa6\x26\x2d\x83\x77\x3f\x7f\x25\x88\xf9\x87\xc8\x47\x3c\x6c\x29\xb5\xc1\x8d\x0b\xb1\x41\x42\x09\x58\xa7\x28\x3e\x61\x8b\xf9\xd5\x04\xba\xd9\xed\x6a\x7e\x20\xa1\xd2\x50\x84\xf8\xf8\x7f\x65\xfa\xac\xb2\xa6\x5e\xe3\xc5\xe8\x4e\xec\x4f\x00\x00\x00\xff\xff\x40\xd6\xc6\xdc\xdc\x02\x00\x00")

func templatesCode_templateGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesCode_templateGoTmpl,
		"templates/code_template.go.tmpl",
	)
}

func templatesCode_templateGoTmpl() (*asset, error) {
	bytes, err := templatesCode_templateGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/code_template.go.tmpl", size: 732, mode: os.FileMode(420), modTime: time.Unix(1469415030, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/.DS_Store": templatesDs_store,
	"templates/code_template.go.tmpl": templatesCode_templateGoTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		".DS_Store": &bintree{templatesDs_store, map[string]*bintree{}},
		"code_template.go.tmpl": &bintree{templatesCode_templateGoTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

